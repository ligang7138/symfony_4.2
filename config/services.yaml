# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
#    App\:
#        resource: '../src/*'
#        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
#    App\Controller\:
#        resource: '../src/Controller'
#        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    grouptour.security.core.encoder:
        class: App\Security\AdminPasswordEncoder
        arguments: [6]

    authentication_handler:
        class: App\Security\AuthenticationHandler
        arguments: ["@request_stack","@doctrine","%admin_bundle%"]

    security.authentication.success_listener:
        class: App\Services\Listeners\LoginListener
        arguments:  ["@security.http_utils", {},"@service_container"]
        tags:
        - { name: 'monolog.logger', channel: 'security' }

    redis_service:
        public: true
        class: App\Services\RedisService
        arguments: ["@snc_redis.default"]

    application_service:
        class: App\DependencyInjection\AppService
        arguments: ["@service_container"]

#    SecurityCheckListener:
#        class: App\Services\Listeners\SecurityCheckListener
#        arguments: ["@application_service","%admin_bundle%","@service_container"]
#        tags:
#            - { name: kernel.event_listener, event: kernel.request, method: roleCheck }